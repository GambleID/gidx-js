[![view on npm](http://img.shields.io/npm/v/gidx-js.svg)](https://www.npmjs.org/package/gidx-js)

# gidx-js
Client-side Javascript utilities for GambleID.

This library includes utilities for:
* [Approvely Rapid 3DS](#rapid-3ds)
* [Credit Card Tokenization (via Finix)](#tokenization)
* [Processor Session ID](#processor-session-id)

## Install
As a script tag (added to window.GIDX):

```html
<script src="https://cdn.jsdelivr.net/npm/gidx-js"></script>

<script>
    //Library is added to window.GIDX
    let threeDS = window.GIDX.get3DSDeviceData();
</script>
```

As a module:
```js
import * as GIDX from 'https://cdn.jsdelivr.net/npm/gidx-js/+esm'
```

As a NPM package:

```
$ npm install gidx-js
import * as GIDX from 'gidx-js';
```

## Initialization
First, call the `init` function with your GIDX Merchant ID and target environment.
```js
GIDX.init({
    merchantId: "5OQAQWZbkkSdEmlfVxsNlA",
    environment: "sandbox" //or production
});
```
## Rapid 3DS
Approvely Rapid requires 3D Secure (3DS, ThreeDS) for all credit card, Apple Pay and Google Pay payments. This library provides functions to help you populate the PaymentMethod.ThreeDS object of your CompleteSession API requests, and handle 3DS challenges.
### Populating the ThreeDS object
Populate the `PaymentMethod.ThreeDS` object of your CompleteSession API requests using the `get3DSDeviceData` function.
```js
let completeSessionRequest = {
    PaymentMethod: {
        Type: "CC",
        Token: "{insert token here}",
        CVV: "123",
        ThreeDS: GIDX.get3DSDeviceData()
    }
};
```

If you are also using Approvely Rapid's [chargeback protection](https://docs.coinflow.cash/docs/implement-chargeback-protection) and have initiated the nSure SDK on the page, `get3DSDeviceData` will also include the `DeviceID`. Below is the javascript Approvely Rapid wants you to include on every page of your app, if you are using their chargeback protection.

```html
<script src="https://sdk.nsureapi.com/sdk.js"></script>
<script>
    window.nSureAsyncInit = function (deviceId) {
        window.nSureSDK.init('9JBW2RHC7JNJN8ZQ');
        window.nSureSDK.init({
            appId: '9JBW2RHC7JNJN8ZQ',
            partnerId: '<contact Approvely for this>'
        });
    };
</script>
```

### Handling the 3DSChallenge Action
Handle the 3DSChallenge Action that can be returned from the CompleteSession API by calling the `show3DSChallenge` function.
```js
let completeSessionResponse = {
    Action: {
        Type: "3DSChallenge",
        URL: "https://acs-public.tp.mastercard.com/api/v1/browser_challenges",
        CReq: "eyJ0aHJlZURTU2VydmVyVHJhbnNJRCI...",
        TransactionID: "707435d1-998c-4463-9367-c7ecf584e10d"
    }
};

if (completeSessionResponse.Action?.Type == "3DSChallenge") {
    GIDX.show3DSChallenge(completeSessionResponse.Action, {
        onComplete: function (transactionId) {
            //Send another CompleteSession request after challenge is completed.
            let completeSessionRequest = {
                PaymentMethod: {
                    Type: "CC",
                    Token: "{insert token here}",
                    ThreeDS: {
                        TransactionID: transactionId,

                        //Optional. Only required if using Approvely Rapid's chargeback protection
                        DeviceID: window.nSureSDK?.getDeviceId()
                    }
                }
            };

            //Call CompleteSession API here
        }
    });
}
```

A 3DS challenge is a URL that gets loaded in a modal iframe that let's the user verify themselves with their bank. For more info on 3DS, [see the Approvely Rapid docs](https://docs.coinflow.cash/docs/about-3ds).

Although in our API requests to Approvely Rapid we set the option that we prefer not to receive a 3DS challenge, in the end it's up to the user's bank, so you need to handle the possibility that a challenge will be requested.

### Customizing the 3DS Challenge HTML

By default, the 3DS challenge is an HTML5 dialog element inserted into the body of your page. The HTML looks like this:
```html
<dialog class="challenge-container">
    <iframe></iframe>
</dialog>
```

The [default CSS](src/lib/index.css) is included in the library, but feel free to add your own CSS to your page.

For more advanced customization, you can provide `insertElement` and `removeElement` functions in your `options` object.

## Tokenization
In order to use Finix to process credit cards, you must use their [tokenization form](https://finix.com/docs/guides/payments/online-payments/payment-details/token-forms/). Our library provides a function, `showPaymentMethodForm`, that renders the Finix form and handles the submission to our PaymentMethod API.

### Usage
See the commented code sample below.
```js
//First, make sure to initialize the library with your GIDX Merchant ID and target environment
GIDX.init({
    merchantId: "5OQAQWZbkkSdEmlfVxsNlA",
    environment: "sandbox" //or production
})

//Get the Tokenizer configuration returned in the CreateSession response
let ccSettings = createSessionResponse.PaymentMethodSettings.find((s) => s.Type === "CC");

//Call the function to render the form inside of your HTML element
GIDX.showPaymentMethodForm(
    'id-of-html-element', //The id of the HTML element. Must already exist on the page.
    {
        merchantSessionId: '1234', //Must be the same MerchantSessionID provided to the CreateSession API.
        paymentMethodTypes: ['CC'], //Finix tokenization form accepts both credit card and bank accounts, but only credit cards are required to use it.
        tokenizer: ccSettings.Tokenizer,
        onSaved: function (paymentMethod) {
            //The full PaymentMethod object returned from our API is passed to this function.
            //Use it to populate your CompleteSession request and finalize the transaction.
            let completeSessionRequest = {
                MerchantSessionID: '1234',
                PaymentMethod: {
                    Type: paymentMethod.Type,
                    Token: paymentMethod.Token
                }
            };
        }
    });
```

### Manually submit
By default, a submit button will be rendered. If you want to handle the submission yourself, you should pass the option `showSubmitButton: false` and call `submit`, as shown below.
```js
let form = GIDX.showPaymentMethodForm(
    'id-of-html-element', //The id of the HTML element. Must already exist on the page.
    {
        merchantSessionId: '1234', //Must be the same MerchantSessionID provided to the CreateSession API.
        paymentMethodTypes: ['CC'], //Finix tokenization form accepts both credit card and bank accounts, but only credit cards are required to use it.
        tokenizer: ccSettings.Tokenizer,
        showSubmitButton: false,
        onSaved: function (paymentMethod) {
            //The full PaymentMethod object returned from our API is passed to this function.
            //Use it to populate your CompleteSession request and finalize the transaction.
            let completeSessionRequest = {
                MerchantSessionID: '1234',
                PaymentMethod: {
                    Type: paymentMethod.Type,
                    Token: paymentMethod.Token
                }
            };
        }
    });

//When you are ready to submit, call this function.
form.submit();
```

### Billing address
The Finix tokenization form does have the ability to collect the customer's billing address by passing `showAddress: true` in the options.
However, it is also possible to pass the billing address yourself by using the `onSaving` option. This option allows you to make any changes to the PaymentMethod API request before it is sent.
```js
GIDX.showPaymentMethodForm('id-of-html-element', {
    merchantSessionId: '1234',
    paymentMethodTypes: ['CC'],
    tokenizer: ccSettings.Tokenizer,
    onSaved: function (paymentMethod) { },

    showAddress: false, //Tell Finix not to build their own address elements.
    onSaving: function (request) {
        //Here you could get the address information from other inputs on the page that you control.
        request.billingAddress = {
            addressLine1: '123 Main St.',
            city: 'Houston',
            stateCode: 'TX',
            postalCode: '77001'
        };
    }
})
```

### Customizing the tokenization form
Along with the options documented here, you can also provide any of the options that the [Finix JS library accepts](https://finix.com/docs/guides/payments/online-payments/payment-details/token-forms/).
```js
GIDX.showPaymentMethodForm('id-of-html-element', {
    merchantSessionId: '1234',
    paymentMethodTypes: ['CC'],
    tokenizer: ccSettings.Tokenizer,
    onSaved: function (paymentMethod) { },

    styles: {
        default: {
            border: '1px solid #CCCDCF',
            borderRadius: '8px'
        },
        error: {
            border: '1px solid rgba(255,0,0, 0.3)'
        }
    }
});
```

## Processor Session ID
Some processors, like Finix, require you to use their own JS SDK's for monitoring risk and fraud. To do this, you must call `GIDX.init` on every page of your application. Then, you must pass the `ProcessorSessionID` in your CreateSession or CompleteSession API requests.

### Initialization
Call this on every page. You will get the required processor's credentials when you go live.
```js
GIDX.init({
    merchantId: "5OQAQWZbkkSdEmlfVxsNlA",
    environment: "sandbox" //or production,
    processorSessionId: {
        type: "Finix",
        merchantId: "You will get this from Finix. In sandbox you can leave it empty."
    }
})
```

### Getting the Processor Session ID
Pass the `ProcessorSessionID` in either you CreateSession or CompleteSession API requests.
```js
{
    "ProcessorSessionID": GIDX.getProcessorSessionId()
}
```

## API Reference
{{#module name="gidx-js"}}
{{>body~}}
{{>member-index~}}
{{>members~}}
{{/module}}
* * *

&copy; 2025 GambleID. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).